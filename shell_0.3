#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

// Fonction pour rechercher une commande dans le PATH
char *find_in_path(const char *cmd) {
	char *path_env = getenv("PATH");
	if (!path_env) return NULL;

	char *path = strtok(path_env, ":");
	while (path) {
		char full_path[1024];
		snprintf(full_path, sizeof(full_path), "%s/%s", path, cmd);
		if (access(full_path, X_OK) == 0) {
			return strdup(full_path);
		}
		path = strtok(NULL, ":");
	}
	return NULL;
}

int main() {
	char *cmd = NULL;
	size_t len = 0;
	ssize_t read;

	// Boucle principale du shell
	while (1) {
		// Afficher le prompt
		printf("simple_shell$ ");

		// Lire la commande entrée par l'utilisateur
		if ((read = getline(&cmd, &len, stdin)) == -1) {
			perror("getline");
			free(cmd);
			exit(EXIT_FAILURE);
		}

		// Enlever le saut de ligne à la fin de la commande
		cmd[strlen(cmd) - 1] = '\0';

		// Si la commande est "exit", quitter le shell
		if (strcmp(cmd, "exit") == 0) {
			free(cmd);
			exit(EXIT_SUCCESS);
		}

		// Trouver le chemin complet de la commande
		char *cmd_path = find_in_path(cmd);
		if (!cmd_path) {
			fprintf(stderr, "Commande introuvable : %s\n", cmd);
			continue; // Recommencer la boucle sans faire un fork
		}

		// Créer un processus fils
		pid_t pid = fork();
		if (pid < 0) {
			perror("fork");
			free(cmd);
			free(cmd_path);
			exit(EXIT_FAILURE);
		}

		if (pid == 0) {
			// Dans le processus fils, exécuter la commande
			char *argv[] = {cmd_path, NULL};  // Arguments pour execve
			execve(cmd_path, argv, NULL);
			// Si execve échoue
			perror("execve");
			free(cmd);
			free(cmd_path);
			_exit(EXIT_FAILURE);
		} else {
			// Dans le processus parent, attendre la fin du processus fils
			int status;
			waitpid(pid, &status, 0);
			if (WIFEXITED(status)) {
				printf("Le processus fils a terminé avec le code %d.\n", WEXITSTATUS(status));
			} else {
				printf("Le processus fils a échoué.\n");
			}
		}

		// Libération de la mémoire allouée
		free(cmd);
		free(cmd_path);
		cmd = NULL;
		len = 0;
	}

	return 0;
}

